"""
This type stub file was generated by pyright.
"""

import typing
from typing_extensions import Self

if typing.TYPE_CHECKING:
    ...
__all__ = ('Type', 'Attribute', 'Range', 'BitString', 'Point', 'Path', 'Polygon', 'Box', 'Line', 'LineSegment', 'Circle', 'ServerVersion')
class Type(typing.NamedTuple):
    oid: int
    name: str
    kind: str
    schema: str
    ...


class Attribute(typing.NamedTuple):
    name: str
    type: Type
    ...


class ServerVersion(typing.NamedTuple):
    major: int
    minor: int
    micro: int
    releaselevel: str
    serial: int
    ...


class _RangeValue(typing.Protocol):
    def __eq__(self, __value: object) -> bool:
        ...
    
    def __lt__(self, __other: _RangeValue) -> bool:
        ...
    
    def __gt__(self, __other: _RangeValue) -> bool:
        ...
    


_RV = typing.TypeVar('_RV', bound=_RangeValue)
class Range(typing.Generic[_RV]):
    """Immutable representation of PostgreSQL `range` type."""
    __slots__ = ...
    _lower: _RV | None
    _upper: _RV | None
    _lower_inc: bool
    _upper_inc: bool
    _empty: bool
    def __init__(self, lower: _RV | None = ..., upper: _RV | None = ..., *, lower_inc: bool = ..., upper_inc: bool = ..., empty: bool = ...) -> None:
        ...
    
    @property
    def lower(self) -> _RV | None:
        ...
    
    @property
    def lower_inc(self) -> bool:
        ...
    
    @property
    def lower_inf(self) -> bool:
        ...
    
    @property
    def upper(self) -> _RV | None:
        ...
    
    @property
    def upper_inc(self) -> bool:
        ...
    
    @property
    def upper_inf(self) -> bool:
        ...
    
    @property
    def isempty(self) -> bool:
        ...
    
    def issubset(self, other: Self) -> bool:
        ...
    
    def issuperset(self, other: Self) -> bool:
        ...
    
    def __bool__(self) -> bool:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self) -> str:
        ...
    
    __str__ = ...


